[gd_scene load_steps=6 format=3 uid="uid://d14pl1542hxm4"]

[ext_resource type="Texture2D" uid="uid://cdwqas426siee" path="res://addons/kenney_input_prompts/Xbox Series/Double/xbox_button_color_y.png" id="2_ovjn6"]

[sub_resource type="GDScript" id="GDScript_t0vhr"]
script/source = "extends CharacterBody2D

# Ant properties
@export var move_speed: int = 50
@export var lerp_speed: float = 0.1
@export var rotation_speed: float = 2 * PI / 5  # 5 seconds to complete a full circle
@export var carry_capacity: float = 100.00
@export var colony_location: Marker2D
@export var defend_radius: float = 100.0
@export var current_state: AntState = AntState.DEFENDING_NEST
@export var size: Vector2 = Vector2(0.2, 0.2)
@export var leading: bool = false

# Random walk variables
@export var random_walk_distance: float = 100.0
@export var random_walk_delay: float = 1.0

# References to other nodes
@onready var reach: Area2D = %Reach
@onready var vision: Area2D = %Vision
@onready var swarm: Area2D = %Swarm

# Internal variables
var target
var carry_weight: float         = 0.00
var previous_state: AntState    = current_state
var inventory: Array            = []
var seen_food: Array            = []
var current_angle: float        = 0.0
var time_since_last_walk: float = 0.0
var swarming: bool = false
var leader

# Enum for Ant states
enum AntState {
	SEARCHING,
	GOING_TO_FOOD,
	CARRYING_FOOD,
	RETURNING_TO_NEST,
	DEFENDING_NEST,
	FOLLOWING,
}

func _ready():
	scale = size

func _physics_process(delta):
	time_since_last_walk += delta

	match current_state:
		AntState.DEFENDING_NEST:
			defend_nest(delta)
		AntState.SEARCHING:
			search_for_food(delta)
		AntState.GOING_TO_FOOD:
			go_to_food()
		AntState.CARRYING_FOOD:
			carry_food()
		AntState.RETURNING_TO_NEST:
			return_to_nest()
		AntState.FOLLOWING:
			follow_leader()
		_:
			pass
	if velocity != Vector2.ZERO:
		rotation = lerp(rotation, velocity.angle(), lerp_speed)
	if target != null:
		var direction = (target - global_position).normalized()
		velocity = direction * move_speed
	move_and_slide()


func defend_nest(delta):
	if colony_location == null:
		set_state(AntState.SEARCHING)
	else:
		current_angle += rotation_speed * delta
		current_angle = fmod(current_angle, 2 * PI)  # Keep the angle between 0 and 2*PI
		target = colony_location.global_position + Vector2(cos(current_angle), sin(current_angle)) * defend_radius
		var direction = (target - global_position).normalized()
		velocity = direction * move_speed


func search_for_food(_delta):
	if seen_food.is_empty():
		if time_since_last_walk >= random_walk_delay:
			# Select a random direction to walk in
			var angle: float = randf_range(0, 2 * PI)
			target = position + Vector2(cos(angle), sin(angle)) * random_walk_distance
			time_since_last_walk = 0.0
	else:
		set_state(AntState.GOING_TO_FOOD)


func go_to_food():
	if seen_food.is_empty():
		set_state(AntState.SEARCHING)
	if target == null && !seen_food.is_empty():
		target = seen_food[0]
	if target != null && position.distance_to(target) < 15:
		print(\"Reached target: \", target)
		seen_food.erase(target)
		target = null
		set_state(AntState.SEARCHING)


func carry_food():
	if carry_weight >= carry_capacity:
		set_state(AntState.RETURNING_TO_NEST)
	else:
		set_state(AntState.SEARCHING)


func return_to_nest():
	target = colony_location.global_position
	if position.distance_to(target) < 75:
		if inventory.is_empty():
			set_state(previous_state)
		else:
			for item in inventory:
				print(\"dropping item: \", item)
				carry_weight -= 25.00
			inventory.clear()


func pickup_food(body):
	print(\"Picking up: \", body)
	inventory.append(body)
	seen_food.erase(body.global_position)
	carry_weight += 25.00 # TODO: food.weight
	body.queue_free()
	set_state(AntState.CARRYING_FOOD)


func see_food(body):
	print(\"Saw: \", body)
	if !seen_food.has(body.global_position):
		seen_food.append(body.global_position)
		target = body.global_position
		set_state(AntState.GOING_TO_FOOD)
	else:
		print(\"already aware of: \", body)


func follow_leader() -> void:
	if leader == null:
		set_state(AntState.SEARCHING)
		return
	target = leader.global_position
	

func set_state(state: AntState):
	previous_state = current_state
	current_state = state
	print(\"State change: \", AntState.find_key(previous_state), \" to \", AntState.find_key(current_state))


func set_leader(ant: Ant):
	swarming = true
	leader = ant
	set_state(AntState.FOLLOWING)


func is_leading() -> bool:
	print(\"leader check!\")
	return leading


func _on_reach_body_entered(body):
	if current_state == AntState.GOING_TO_FOOD:
		if body.is_in_group(\"food\"):
			pickup_food(body)


func _on_vision_body_entered(body):
	if body.is_in_group(\"food\"):
		see_food(body)


func _on_swarm_body_entered(body):
	if swarming == true:
		print(\"already swarming\")
		return
	if body.has_method(\"is_leading\"):
		if body.is_leading:
			print(\"new leader! \", body)
			set_leader(body)


func _on_swarm_body_exited(_body):
	pass
"

[sub_resource type="CircleShape2D" id="CircleShape2D_7v6id"]
radius = 523.795

[sub_resource type="CircleShape2D" id="CircleShape2D_6a7x7"]
radius = 97.5584

[sub_resource type="CircleShape2D" id="CircleShape2D_mrwpu"]

[node name="Ant" type="CharacterBody2D" groups=["ant"]]
position = Vector2(-8, 0)
script = SubResource("GDScript_t0vhr")
move_speed = 100
lerp_speed = 1.0
current_state = 0
size = Vector2(0.1, 0.1)

[node name="Swarm" type="Area2D" parent="."]
unique_name_in_owner = true
scale = Vector2(1.14803, 1.14803)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Swarm"]
shape = SubResource("CircleShape2D_7v6id")
debug_color = Color(0.576471, 0.494118, 0.678431, 0.419608)

[node name="Reach" type="Area2D" parent="."]
unique_name_in_owner = true
scale = Vector2(1.14803, 1.14803)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Reach"]
shape = SubResource("CircleShape2D_6a7x7")
debug_color = Color(0.0901961, 0.654902, 0.462745, 0.419608)

[node name="Vision" type="Area2D" parent="."]
unique_name_in_owner = true
rotation = 1.57079

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Vision"]
position = Vector2(-0.00110435, 176)
polygon = PackedVector2Array(0.00110429, -176, -447.994, -1272, 384.006, -1272)

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("2_ovjn6")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2(4.98848, 4.98848)
shape = SubResource("CircleShape2D_mrwpu")

[connection signal="body_entered" from="Swarm" to="." method="_on_swarm_body_entered"]
[connection signal="body_exited" from="Swarm" to="." method="_on_swarm_body_exited"]
[connection signal="body_entered" from="Reach" to="." method="_on_reach_body_entered"]
[connection signal="body_entered" from="Vision" to="." method="_on_vision_body_entered"]
